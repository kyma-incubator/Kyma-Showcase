apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  name: landmarks
spec:
  deps: |-
    { 
      "name": "landmarks",
      "version": "1.0.0",
      "dependencies": {
        "node-fetch": "2.6.1",
        "@google-cloud/vision":"2.3.8",
        "nanoid": "3.1.25"
      }
    }
  env:
    - name: API_CONFIG
      valueFrom:
        configMapKeyRef:
          key: config.json
          name: showcase-functions-config
    - name: GCP_API_KEY
      valueFrom:
        secretKeyRef:
          key: GCP_API_KEY
          name: kyma-showcase-secret
    - name: GCP_EMAIL
      valueFrom:
        secretKeyRef:
          key: GCP_EMAIL
          name: kyma-showcase-secret
  runtime: nodejs14
  source: |-
    module.exports = { 
      main: async function (event, context) {
        async function getBase64(id) {
          console.log("Getting base64 from DB");
          const fetch = require('node-fetch');
          const URL = JSON.parse(process.env.API_CONFIG).API_URL + '/' + id;
          const response = await fetch(URL);
          const data = await response.json();
          const content = data.content;
          const base64 = content.replace(/data:.*?base64,/, '');
          console.log("Base64 loaded");
          return base64;
        }

        async function getLandmarks(base64){
          console.log("Getting landmarks from GCP");
          const vision = require('@google-cloud/vision');
          const options = {
            credentials: {
              client_email: process.env.GCP_EMAIL,
              private_key: process.env.GCP_API_KEY.replace(/\\n/gm, '\n'),
            },
          };

          const client = new vision.ImageAnnotatorClient(options);
          const request = {
            image: {
              content: Buffer.from(base64, 'base64'),
            },
          };

          const [result] = await client.landmarkDetection(request);
          const resultObjects = result.landmarkAnnotations;
          if (resultObjects.length === 0)
            return null;
          const landmarks = resultObjects.map(ldm =>
              ({
                name: ldm.description,
                latitude: (ldm.locations.map(lat => lat.latLng.latitude))[0],
                longitude: (ldm.locations.map(lon => lon.latLng.longitude))[0]
              })
          );
          const objectsJson = JSON.stringify({landmarks});
          console.log("Landmarks loaded");
          return objectsJson;
        }

        async function putDetailsToDB(id, data){
          console.log("Putting landmarks to DB");
          const fetch = require('node-fetch');
          const URL = JSON.parse(process.env.API_CONFIG).API_URL + '/' + id;
          const response = await fetch(URL,{
            method:'PUT',
            body: data,
            headers: {
              'Content-type': 'application/json',
            },
          });
          console.log("Landmarks put to DB with status: " + response.status);
          return response.json();
        }

        try{
          const imgID = event.data;

          console.log("Processing image: " + imgID);

          const base64 = await getBase64(imgID);
          const landmarks = await getLandmarks(base64);
          if (landmarks){
            await putDetailsToDB(imgID, landmarks);
          } else {
            console.log("Landmarks array is empty");
          }
        }catch(err){
          console.error(err);
          return null;
        }
      }
    }