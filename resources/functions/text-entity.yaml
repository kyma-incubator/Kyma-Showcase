apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  name: text-entity
spec:
  deps: |-
    {
      "name": "text-entity",
      "version": "1.0.0",
      "dependencies": {
        "node-fetch": "2.6.1",
        "@google-cloud/language":"4.3.0",
        "nanoid": "3.1.25"
      }
    }
  env:
    - name: GCP_API_KEY
      valueFrom:
        secretKeyRef:
          key: GCP_API_KEY
          name: kyma-showcase-secret
    - name: GCP_EMAIL
      valueFrom:
        secretKeyRef:
          key: GCP_EMAIL
          name: kyma-showcase-secret
    - name: API_CONFIG
      valueFrom:
        configMapKeyRef:
          key: config.json
          name: showcase-frontend-config
  runtime: nodejs14
  source: |-
    module.exports = {
      main: async function (event, context) {
        async function getText(id) {
          console.log("Getting text from DB");
          const fetch = require('node-fetch');
          const URL = JSON.parse(process.env.API_CONFIG).API_URL + '/' + id;
          const response = await fetch(URL);
          const data = await response.json();
          const content = data.gcp.map(JSON.parse);
          const font = content?.find(obj => Object.keys(obj).includes('font'))?.font || [];
          console.log("Text loaded");
          return font;
        }

      async function getTextEntities(text) {
        console.log("Getting text entities");
        const language = require('@google-cloud/language');
        const options = {
            credentials: {
              client_email: process.env.GCP_EMAIL,
              private_key: process.env.GCP_API_KEY.replace(/\\n/gm, '\n'),
            },
        };

        const client = new language.LanguageServiceClient(options);
        const document = {
          content: text,
          type: 'PLAIN_TEXT',
        };
        const [result] = await client.analyzeEntitySentiment({document});
        const entities = result.entities;
        const entityDetails = entities.map(entity => ({
            name: entity.name,
            type: entity.type,
            sentiment: entity.sentiment.score,
          })
        );
        if (entityDetails.length === 0)
          return null;
        const entityJSON = JSON.stringify({entityDetails});
        return entityJSON;
      }

      async function putDetailsToDB(id, data){
        console.log("Putting entity details to DB");
        const fetch = require('node-fetch');
        const URL = JSON.parse(process.env.API_CONFIG).API_URL + '/' + id;
        const response = await fetch(URL,{
          method:'PUT',
          body: data,
          headers: {
            'Content-type': 'application/json',
          },
        });
        await console.log("Entity details put to DB with status: " + response.status);
        return response.json();
        }

        try{
        // Needed to remove unwanted apostrophes from our ID
        const imgID = event.data.slice(3, -3);
        console.log("Processing image: " + imgID);
        const text = await getText(imgID);
        const textEntities = await getTextEntities(text);
        if(textEntities){
          await putDetailsToDB(imgID, textEntities);
        }else{
          console.log("Entities array empty");
        }
        }catch(err){
          console.error(err);
          return null;
        }
      }
    }
